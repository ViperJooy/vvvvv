/*
 * Designed and developed by 2020 skydoves (Jaewoong Eum)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.viper.vvvvv.ui.player

import android.content.Context
import androidx.databinding.Bindable
import androidx.lifecycle.*
import com.google.android.exoplayer2.ExoPlayer
import com.google.android.exoplayer2.PlaybackException
import com.google.android.exoplayer2.Player
import com.skydoves.bindables.BindingViewModel
import com.skydoves.bindables.bindingProperty
import com.skydoves.whatif.whatIfNotNull
import com.viper.baselibrary.ext.toast
import com.viper.player.argument.PlayerParams
import com.viper.player.repository.PlayerRepository
import com.viper.player.util.CustomPlaybackState
import com.viper.player.util.createMediaItem
import com.viper.vvvvv.model.RoomInfo
import com.viper.vvvvv.repository.MainRepository
import dagger.assisted.Assisted
import dagger.assisted.AssistedInject
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.launch
import timber.log.Timber

class LiveUrlViewModel @AssistedInject constructor(
    private val mainRepository: MainRepository,
    private val playerRepository: PlayerRepository,
    @Assisted private val roomInfo: RoomInfo,
) : BindingViewModel() {

    //exoplayer
    private val _playerLiveData = MutableLiveData<ExoPlayer>()
    val playerLiveData: LiveData<ExoPlayer> = _playerLiveData

    private val _playbackStateLiveData = MutableLiveData(CustomPlaybackState.LOADING)
    val playbackStateLiveData: LiveData<CustomPlaybackState> = _playbackStateLiveData

    private val _isMuteLiveData = MutableLiveData<Boolean>(false)
    val isMuteLiveData: LiveData<Boolean> = _isMuteLiveData

    private var playerEventListener: Player.Listener? = getPlayerEventLister()


    @get:Bindable
    var isLoading: Boolean by bindingProperty(true)
        private set

    @get:Bindable
    var toastMessage: String? by bindingProperty(null)
        private set

    private val urlInfoFlow: Flow<Map<String, String>?> = mainRepository.getLiveRealUrl(
        roomInfo,
        onComplete = { isLoading = false },
        onError = { toastMessage = it })


//    @get:Bindable
//    val urlResponseData = urlInfoFlow.asLiveData()


//    @get:Bindable
//    val urlInfo: Map<String, String>? by urlInfoFlow.asBindingProperty(viewModelScope, null)

    override fun onCleared() {
        super.onCleared()
        _playerLiveData.value?.let {
            release()
        }
    }

    fun onActivityCreate(context: Context) {
        viewModelScope.launch {
            urlInfoFlow.collect {
                if (_playerLiveData.value == null) {
                    setupPlayer(context, it)
                }
            }
        }
    }

    fun onPlayButtonClicked() {
        if (playbackStateLiveData.value != CustomPlaybackState.ERROR) {
            playerRepository.togglePlayingState()
        }
    }

    fun onReplayClicked() {
        when (playbackStateLiveData.value) {
            CustomPlaybackState.ERROR -> {
                playerRepository.rePrepareAndPlay()
            }
            CustomPlaybackState.ENDED -> {
                playerRepository.seekToDefaultPosition()
            }
            else -> return
        }
    }

    fun onMuteClicked() {
        with(playerRepository) {
            toggleMuteState()
            _isMuteLiveData.value = isMute()
        }
    }

    private fun setupPlayer(context: Context, map: Map<String, String>?) {
        with(playerRepository) {
            _playerLiveData.value = createPlayer(context)
            map?.get("OD")?.let {
                val playerParams = PlayerParams(map["OD"].toString())
                preparePlayer(createMediaItem(playerParams))
                addEventListener(playerEventListener)
                play()
            }
        }
    }

    private fun release() {
        with(playerRepository) {
            removeEventListener(playerEventListener)
            playerEventListener = null
            release()
        }
    }


    internal fun getPlayerEventLister(): Player.Listener = object : Player.Listener {

        override fun onPlayWhenReadyChanged(playWhenReady: Boolean, reason: Int) {
            _playbackStateLiveData.value = when (reason) {
                Player.PLAY_WHEN_READY_CHANGE_REASON_USER_REQUEST,
                Player.PLAY_WHEN_READY_CHANGE_REASON_REMOTE -> {
                    if (playWhenReady) {
                        CustomPlaybackState.PLAYING
                    } else {
                        CustomPlaybackState.PAUSED
                    }
                }
                Player.PLAY_WHEN_READY_CHANGE_REASON_AUDIO_FOCUS_LOSS,
                Player.PLAY_WHEN_READY_CHANGE_REASON_AUDIO_BECOMING_NOISY -> CustomPlaybackState.PAUSED
                else -> return
            }
        }

        override fun onPlaybackStateChanged(state: Int) {
            _playbackStateLiveData.value = when (state) {
                Player.STATE_ENDED -> CustomPlaybackState.ENDED
                Player.STATE_READY -> {
                    if (playerRepository.isPlayerReady()) {
                        CustomPlaybackState.PLAYING
                    } else {
                        CustomPlaybackState.PAUSED
                    }
                }
                Player.STATE_BUFFERING -> CustomPlaybackState.LOADING
                else -> return
            }
        }

        override fun onEvents(player: Player, events: Player.Events) {
            super.onEvents(player, events)
            if (events.contains(Player.EVENT_IS_LOADING_CHANGED)) {
                val isLoading = player.isLoading
                val isNotPlaying = player.isPlaying.not()
                if (isLoading && isNotPlaying) {
                    _playbackStateLiveData.value = CustomPlaybackState.LOADING
                }
            }
        }

        override fun onPlayerError(error: PlaybackException) {
            _playbackStateLiveData.value = CustomPlaybackState.ERROR
        }
    }


    init {
        Timber.e("init PlayerViewModel")
    }

    @dagger.assisted.AssistedFactory
    interface AssistedFactory {
        fun create(roomInfo: RoomInfo): LiveUrlViewModel
    }

    companion object {
        fun provideFactory(
            assistedFactory: AssistedFactory,
            roomInfo: RoomInfo,
        ): ViewModelProvider.Factory = object : ViewModelProvider.Factory {

            @Suppress("UNCHECKED_CAST")
            override fun <T : ViewModel> create(modelClass: Class<T>): T {
                return assistedFactory.create(roomInfo) as T
            }
        }
    }
}
